#!/usr/bin/env bash
#
# ARG_OPTIONAL_SINGLE([acc2taxidfile],[A],[Accession to taxid file. If not present will be downloaded])
# ARG_OPTIONAL_BOOLEAN([print],[],[boolean optional argument help msg])
# ARG_POSITIONAL_SINGLE([ID],[Taxid or valid NCBI taxon name],[])
# ARG_POSITIONAL_SINGLE([CPUS],[Number of cpus to use],[])
# ARG_POSITIONAL_SINGLE([DB],[PATH to the main database being subset],[])
# ARG_POSITIONAL_SINGLE([TYPE],[Whether is nucl or prot],[])
# ARG_HELP([Simple script to subset BLAST databases based on taxa. It requires taxonkit, csvtk, pigz, and blast+ installed])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='Ah'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_acc2taxidfile=
_arg_print="off"


print_help()
{
	printf '%s\n' "Simple script to subset BLAST databases based on taxa. It requires taxonkit, csvtk, pigz, and blast+ installed"
	printf 'Usage: %s [-A|--acc2taxidfile <arg>] [--(no-)print] [-h|--help] <ID> <CPUS> <DB> <TYPE>\n' "$0"
	printf '\t%s\n' "<ID>: Taxid or valid NCBI taxon name"
	printf '\t%s\n' "<CPUS>: Number of cpus to use"
	printf '\t%s\n' "<DB>: PATH to the main database being subset"
	printf '\t%s\n' "<TYPE>: Whether is nucl or prot"
	printf '\t%s\n' "-A, --acc2taxidfile: Accession to taxid file. If not present will be downloaded (no default)"
	printf '\t%s\n' "--print, --no-print: boolean optional argument help msg (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-A|--acc2taxidfile)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_acc2taxidfile="$2"
				shift
				;;
			--acc2taxidfile=*)
				_arg_acc2taxidfile="${_key##--acc2taxidfile=}"
				;;
			-A*)
				_arg_acc2taxidfile="${_key##-A}"
				;;
			--no-print|--print)
				_arg_print="on"
				test "${1:0:5}" = "--no-" && _arg_print="off"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'ID', 'CPUS', 'DB' and 'TYPE'"
	test "${_positionals_count}" -ge 4 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 4 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 4 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 4 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_id _arg_cpus _arg_db _arg_type "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


set -e
ID="$_arg_id"
CPUS="$_arg_cpus"
DB="$_arg_db"
TYPE="$_arg_type"
ACC2TID="$_arg_acc2taxidfile"
re='^[0-9]+$'
if ! [[ $ID =~ $re ]]; then
    ID=$(echo "${ID}" | taxonkit name2taxid -j "${CPUS}" | cut -f2)
fi
if [ -z "$ACC2TID" ]; then
  if [ "${TYPE}" = nucl ]
  then
    ACC2TID="${TYPE}"_gb.accession2taxid.gz
  else
    ACC2TID=prot.accession2taxid.gz
  fi
  wget ftp://ftp.ncbi.nih.gov/pub/taxonomy/accession2taxid/"${TYPE}"_gb.accession2taxid.gz* && md5sum -c *.md5
fi

taxonkit list --ids "$ID" --indent "" >"${ID}".taxid.txt
COUNT=$(wc -l < "${ID}".taxid.txt)
echo "The taxid ${ID} contains ${COUNT} taxids of lower rank"

pigz -dc "$ACC2TID" | csvtk grep -t -f taxid -P "$ID".taxid.txt |
    csvtk cut -t -f gi | sed 1d > "${ID}".gis.txt
COUNT=$(wc -l < "${ID}".gis.txt)
echo "Found ${COUNT} GI codes belonging to ${ID}"

blastdb_aliastool -db "${DB}" -gilist "${ID}".gis.txt -dbtype ${TYPE} -out db_"${ID}" \
  -title "Subset from ${DB} based on ${ID} taxonomic tree"

# ] <-- needed because of Argbash
